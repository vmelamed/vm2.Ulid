name: CI - Build, Test, Coverage & Benchmarks

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:
    inputs:
      os:
        description: "JSON array of runners"
        type: string
        required: true
        default: '["ubuntu-latest"]'

      dotnet-version:
        description: "Version of .NET SDK to use"
        type: string
        required: true
        default: "9.0.x"

      build-configuration:
        description: "The type of builds to produce, e.g. Release vs Debug"
        type: string
        required: false
        default: "Release"

      defined_symbols:
        description: "Define constants to pass to the compiler"
        type: string
        required: false
        default: ""

      test-project:
        description: "Path to test project"
        type: string
        required: true
        default: "./test/UlidType.Tests/UlidType.Tests.csproj"

      min-coverage-pct:
        description: "Minimum acceptable code coverage percentage"
        type: number
        required: true
        default: 75

      run-benchmarks:
        description: "Whether to run benchmarks and compare against baseline"
        type: boolean
        required: true
        default: true

      benchmark-project:
        description: "Path to benchmark project"
        type: string
        required: true
        default: "./benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj"

      max-regression-pct:
        description: "Maximum acceptable performance regression percentage"
        type: number
        required: true
        default: 10 # percent

      force-new-baseline:
        description: "Whether to force new baseline (if true, no regression check is done)"
        type: boolean
        required: true
        default: false

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  # Default values for inputs, used if the input is not provided
  MATRIX_OS: ${{ fromJson(inputs.os) || fromJson(vars.MATRIX_OS) || '["ubuntu-latest"]' }}
  DOTNET_VERSION: ${{ inputs.dotnet-version || vars.DOTNET_VERSION || '9.0.x' }}
  BUILD_CONFIGURATION: ${{ inputs.build-configuration || vars.BUILD_CONFIGURATION || 'Release' }}
  DEFINED_SYMBOLS: ${{ inputs.defined_symbols || vars.DEFINED_SYMBOLS || '' }}
  TEST_PROJECT: ${{ inputs.test-project || vars.TEST_PROJECT || './test/UlidType.Tests/UlidType.Tests.csproj' }}
  MIN_COVERAGE_PCT: ${{ fromJson(inputs.min-coverage-pct) || fromJson(vars.MIN_COVERAGE_PCT) || 75 }} # percent
  RUN_BENCHMARKS: ${{ fromJSON(inputs.run-benchmarks) || fromJson(vars.RUN_BENCHMARKS) || true }}
  BENCHMARK_PROJECT: ${{ inputs.benchmark-project || vars.BENCHMARK_PROJECT || './benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj' }}
  FORCE_NEW_BASELINE: ${{ fromJSON(inputs.force-new-baseline) || fromJson(vars.FORCE_NEW_BASELINE) || false }}
  MAX_REGRESSION_PCT: ${{ fromJSON(inputs.max-regression-pct) || fromJson(vars.MAX_REGRESSION_PCT) || 10 }} # percent
  VERBOSE: ${{ fromJSON(vars.VERBOSE) || false }}

jobs:
  sample:
    name: Sample Job
    env:
      SAMPLE_ENV_VAR: "Hello, World!"
    strategy:
      matrix:
        os: ${{ fromJSON(inputs.os) }}
    runs-on: ${{ matrix.os }}
    steps:
      - run: echo "This is a sample job. Replace or remove it as needed."

  build_job:
    name: Build
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
    uses: ./.github/workflows/build.yaml
    # allow skipping CI via commit message only for push events
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, '[skip ci]') }}
    with:
      os: ${{ inputs.os || vars.MATRIX_OS || '["ubuntu-latest"]' }}
      dotnet-version: ${{ inputs.dotnet-version || vars.DOTNET_VERSION || '9.0.x' }}
      build-configuration: ${{ inputs.build-configuration ||vars.BUILD_CONFIGURATION || 'Release' }}
      defined_symbols: ${{ inputs.defined_symbols || vars.DEFINED_SYMBOLS || '' }}

  test_job:
    name: Test
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, '[skip ci]') }}
    needs: build_job
    uses: ./.github/workflows/test.yaml
    with:
      os: ${{ inputs.os || vars.MATRIX_OS || '["ubuntu-latest"]' }}
      dotnet-version: ${{ inputs.dotnet-version || vars.DOTNET_VERSION || '9.0.x' }}
      test-project: ${{ inputs.test-project || vars.TEST_PROJECT || './test/UlidType.Tests/UlidType.Tests.csproj' }}
      build-configuration: ${{ inputs.build-configuration ||vars.BUILD_CONFIGURATION || 'Release' }}
      defined_symbols: ${{ inputs.defined_symbols || vars.DEFINED_SYMBOLS || '' }}
      verbose: ${{ fromJSON(vars.VERBOSE) || false }}
      min-coverage-pct: ${{ fromJSON(vars.MIN_COVERAGE_PCT) || 75 }}

  benchmarks_job:
    name: Benchmarks
    if: >
      ${{ github.event_name != 'push' ||
      fromJSON(inputs.run-benchmarks) || fromJson(vars.RUN_BENCHMARKS) ||
      !contains(github.event.head_commit.message, '[skip ci]') }}
    needs: build_job
    uses: ./.github/workflows/benchmarks.yaml
    with:
      os: ${{ inputs.os || vars.MATRIX_OS || '["ubuntu-latest"]' }}
      dotnet-version: ${{ inputs.dotnet-version || vars.DOTNET_VERSION || '9.0.x' }}
      benchmark-project: ${{ inputs.benchmark-project || vars.BENCHMARK_PROJECT || './benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj' }}
      build-configuration: ${{ inputs.build-configuration ||vars.BUILD_CONFIGURATION || 'Release' }}
      defined_symbols: ${{ inputs.defined_symbols || vars.DEFINED_SYMBOLS || '' }}
      verbose: ${{ inputs.verbose || fromJSON(vars.VERBOSE) || false }}
      max-regression-pct: ${{ fromJSON(vars.MAX_REGRESSION_PCT) || 10 }}
      force-new-baseline: ${{ inputs.force-new-baseline || fromJSON(vars.FORCE_NEW_BASELINE) || false }}
