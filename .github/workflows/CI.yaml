name: CI - Build, Test, Coverage & Benchmarks

on:
  push:
    branches:
      - "**"

  pull_request:
    branches:
      - "**"

  workflow_dispatch:
    inputs:
      os:
        description: "JSON array of runners"
        type: string
        required: true
        default: '["ubuntu-latest"]'

      dotnet-version:
        description: "Version of .NET SDK to use"
        type: string
        required: true
        default: "9.0.x"

      configuration:
        description: "The type of builds to produce, e.g. Release vs Debug"
        type: string
        required: false
        default: "Release"

      defined-symbols:
        description: "Define constants to pass to the compiler"
        type: string
        required: false
        default: ""

      test-project:
        description: "Path to test project"
        type: string
        required: true
        default: "./test/UlidType.Tests/UlidType.Tests.csproj"

      min-coverage-pct:
        description: "Minimum acceptable code coverage percentage"
        type: number
        required: true
        default: 75

      run-benchmarks:
        description: "Whether to run benchmarks and compare against baseline"
        type: boolean
        required: true
        default: true

      benchmark-project:
        description: "Path to benchmark project"
        type: string
        required: true
        default: "./benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj"

      max-regression-pct:
        description: "Maximum acceptable performance regression percentage"
        type: number
        required: true
        default: 10 # percent

      force-new-baseline:
        description: "Whether to force new baseline (if true, no regression check is done)"
        type: boolean
        required: true
        default: false

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup Variables
    runs-on: ubuntu-latest
    outputs:
      matrix-os: ${{ steps.setup-vars.outputs.matrix-os }}
      dotnet-version: ${{ steps.setup-vars.outputs.dotnet-version }}
      configuration: ${{ steps.setup-vars.outputs.configuration }}
      defined-symbols: ${{ steps.setup-vars.outputs.defined-symbols }}
      test-project: ${{ steps.setup-vars.outputs.test-project }}
      min-coverage-pct: ${{ steps.setup-vars.outputs.min-coverage-pct }}
      run-benchmarks: ${{ steps.setup-vars.outputs.run-benchmarks }}
      benchmark-project: ${{ steps.setup-vars.outputs.benchmark-project }}
      force-new-baseline: ${{ steps.setup-vars.outputs.force-new-baseline }}
      max-regression-pct: ${{ steps.setup-vars.outputs.max-regression-pct }}
      verbose: ${{ steps.setup-vars.outputs.verbose }}
    steps:
      - id: setup-vars
        run: |
          echo "matrix-os=${{ fromJson(inputs.os) || fromJson(vars.MATRIX_OS) || '["ubuntu-latest"]' }}" >> $GITHUB_OUTPUT
          echo "dotnet-version=${{ inputs.dotnet-version || vars.DOTNET_VERSION || '9.0.x' }}" >> $GITHUB_OUTPUT
          echo "configuration=${{ inputs.configuration || vars.CONFIGURATION || 'Release' }}" >> $GITHUB_OUTPUT
          echo "defined-symbols=${{ inputs.defined-symbols || vars.DEFINED_SYMBOLS || '' }}" >> $GITHUB_OUTPUT
          echo "test-project=${{ inputs.test-project || vars.TEST_PROJECT || './test/UlidType.Tests/UlidType.Tests.csproj' }}" >> $GITHUB_OUTPUT
          echo "min-coverage-pct=${{ fromJson(inputs.min-coverage-pct) || fromJson(vars.MIN_COVERAGE_PCT) || 75 }}" >> $GITHUB_OUTPUT
          echo "run-benchmarks=${{ fromJSON(inputs.run-benchmarks) || fromJson(vars.RUN_BENCHMARKS) || true }}" >> $GITHUB_OUTPUT
          echo "benchmark-project=${{ inputs.benchmark-project || vars.BENCHMARK_PROJECT || './benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj' }}" >> $GITHUB_OUTPUT
          echo "force-new-baseline=${{ fromJSON(inputs.force-new-baseline) || fromJson(vars.FORCE_NEW_BASELINE) || false }}" >> $GITHUB_OUTPUT
          echo "max-regression-pct=${{ fromJSON(inputs.max-regression-pct) || fromJson(vars.MAX_REGRESSION_PCT) || 10 }}" >> $GITHUB_OUTPUT
          echo "verbose=${{ fromJSON(vars.VERBOSE) || false }}" >> $GITHUB_OUTPUT

  build_job:
    name: Build
    needs:
      - setup
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    uses: ./.github/workflows/build.yaml
    # allow skipping CI via commit message only for push events
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    with:
      os: ${{ needs.setup.outputs.matrix-os }}
      configuration: ${{ needs.setup.outputs.configuration }}
      defined-symbols: ${{ needs.setup.outputs.defined-symbols }}
      dotnet-version: ${{ needs.setup.outputs.dotnet-version }}

  test_job:
    name: Test
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    needs:
      - setup
      - build_job
    uses: ./.github/workflows/test.yaml
    with:
      os: ${{ needs.setup.outputs.matrix-os }}
      dotnet-version: ${{ needs.setup.outputs.dotnet-version }}
      test-project: ${{ needs.setup.outputs.test-project }}
      configuration: ${{ needs.setup.outputs.configuration }}
      defined-symbols: ${{ needs.setup.outputs.defined-symbols }}
      verbose: ${{ needs.setup.outputs.verbose }}
      min-coverage-pct: ${{ needs.setup.outputs.min-coverage-pct }}

  benchmarks_job:
    name: Benchmarks
    if: "${{
      !contains(github.event.head_commit.message, '[skip ci]') ||
      fromJSON(inputs.run-benchmarks) ||
      fromJSON(vars.RUN_BENCHMARKS) }}"
    needs:
      - setup
      - build_job
    uses: ./.github/workflows/benchmarks.yaml
    with:
      os: ${{ needs.setup.outputs.matrix-os }}
      dotnet-version: ${{ needs.setup.outputs.dotnet-version }}
      benchmark-project: ${{ needs.setup.outputs.benchmark-project }}
      configuration: ${{ needs.setup.outputs.configuration }}
      defined-symbols: ${{ needs.setup.outputs.defined-symbols }}
      verbose: ${{ needs.setup.outputs.verbose }}
      max-regression-pct: ${{ needs.setup.outputs.max-regression-pct }}
      force-new-baseline: ${{ needs.setup.outputs.force-new-baseline }}
