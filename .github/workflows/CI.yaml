name: CI - Build, Test, Coverage & Benchmarks

on:
  push:
    branches:
      - "**"

  pull_request:
    branches:
      - "**"

  workflow_dispatch:
    inputs:
      os:
        description: "JSON array of runners"
        type: string
        required: true
        default: '["ubuntu-latest"]'

      dotnet-version:
        description: "Version of .NET SDK to use"
        type: string
        required: true
        default: "9.0.x"

      configuration:
        description: "The type of builds to produce, e.g. Release vs Debug"
        type: string
        required: false
        default: "Release"

      defined-symbols:
        description: "Define constants to pass to the compiler"
        type: string
        required: false
        default: ""

      test-project:
        description: "Path to test project"
        type: string
        required: true
        default: "./test/UlidType.Tests/UlidType.Tests.csproj"

      min-coverage-pct:
        description: "Minimum acceptable code coverage percentage"
        type: number
        required: true
        default: 75

      run-benchmarks:
        description: "Whether to run benchmarks and compare against baseline"
        type: boolean
        required: true
        default: true

      benchmark-project:
        description: "Path to benchmark project"
        type: string
        required: true
        default: "./benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj"

      max-regression-pct:
        description: "Maximum acceptable performance regression percentage"
        type: number
        required: true
        default: 10 # percent

      force-new-baseline:
        description: "Whether to force new baseline (if true, no regression check is done)"
        type: boolean
        required: true
        default: false

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup Variables
    runs-on: ubuntu-latest
    outputs:
      matrix-os: ${{ steps.setup-vars.outputs.matrix-os }}
      dotnet-version: ${{ steps.setup-vars.outputs.dotnet-version }}
      configuration: ${{ steps.setup-vars.outputs.configuration }}
      defined-symbols: ${{ steps.setup-vars.outputs.defined-symbols }}
      test-project: ${{ steps.setup-vars.outputs.test-project }}
      min-coverage-pct: ${{ steps.setup-vars.outputs.min-coverage-pct }}
      run-benchmarks: ${{ steps.setup-vars.outputs.run-benchmarks }}
      benchmark-project: ${{ steps.setup-vars.outputs.benchmark-project }}
      force-new-baseline: ${{ steps.setup-vars.outputs.force-new-baseline }}
      max-regression-pct: ${{ steps.setup-vars.outputs.max-regression-pct }}
      verbose: ${{ steps.setup-vars.outputs.verbose }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Make Scripts Executable
        run: chmod u+x ./scripts/bash/*.sh

      - id: setup-vars
        shell: bash
        env:
          MATRIX_OS: ${{ inputs.os || vars.MATRIX_OS || '["ubuntu-latest"]' }}
          DOTNET_VERSION: ${{ inputs.dotnet-version || vars.DOTNET_VERSION || '9.0.x' }}
          CONFIGURATION: ${{ inputs.configuration || vars.CONFIGURATION || 'Release' }}
          DEFINED_SYMBOLS: ${{ inputs.defined-symbols || vars.DEFINED_SYMBOLS || '' }}
          TEST_PROJECT: ${{ inputs.test-project || vars.TEST_PROJECT || './test/UlidType.Tests/UlidType.Tests.csproj' }}
          MIN_COVERAGE_PCT: ${{ inputs.min-coverage-pct || vars.MIN_COVERAGE_PCT || '75' }}
          RUN_BENCHMARKS: ${{ inputs.run-benchmarks || vars.RUN_BENCHMARKS || 'true' }}
          BENCHMARK_PROJECT: ${{ inputs.benchmark-project || vars.BENCHMARK_PROJECT || './benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj' }}
          FORCE_NEW_BASELINE: ${{ inputs.force-new-baseline || vars.FORCE_NEW_BASELINE || 'false' }}
          MAX_REGRESSION_PCT: ${{ inputs.max-regression-pct || vars.MAX_REGRESSION_PCT || '10' }}
          VERBOSE: ${{ vars.VERBOSE || 'false' }}
        run: ./scripts/bash/setup-ci-vars.sh

  build_job:
    name: Build
    needs:
      - setup
    strategy:
      fail-fast: true
      matrix:
        os: ${{ fromJSON(needs.setup.outputs.matrix-os) }}
    uses: ./.github/workflows/build.yaml
    # Skip if [skip ci] is found in commit message (push only), always run for PRs
    if: >-
      ${{
        (github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]')) ||
        github.event_name == 'pull_request' ||
        github.event_name == 'workflow_dispatch'
      }}
    with:
      os: ${{ fromJSON(needs.setup.outputs.matrix-os) }}
      configuration: ${{ needs.setup.outputs.configuration }}
      defined-symbols: ${{ needs.setup.outputs.defined-symbols }}
      dotnet-version: ${{ needs.setup.outputs.dotnet-version }}

  test_job:
    name: Test
    if: >-
      ${{
        (github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]')) ||
        github.event_name == 'pull_request' ||
        github.event_name == 'workflow_dispatch'
      }}
    needs:
      - setup
      - build_job
    uses: ./.github/workflows/test.yaml
    with:
      os: ${{ fromJSON(needs.setup.outputs.matrix-os) }}
      dotnet-version: ${{ needs.setup.outputs.dotnet-version }}
      test-project: ${{ needs.setup.outputs.test-project }}
      configuration: ${{ needs.setup.outputs.configuration }}
      defined-symbols: ${{ needs.setup.outputs.defined-symbols }}
      verbose: ${{ needs.setup.outputs.verbose }}
      min-coverage-pct: ${{ fromJSON(needs.setup.outputs.min-coverage-pct) }}

  benchmarks_job:
    name: Benchmarks
    if: >-
      ${{
        (github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]')) ||
        github.event_name == 'pull_request' ||
        github.event_name == 'workflow_dispatch' ||
        fromJSON(inputs.run-benchmarks) ||
        fromJSON(vars.RUN_BENCHMARKS)
      }}
    needs:
      - setup
      - build_job
    uses: ./.github/workflows/benchmarks.yaml
    with:
      os: ${{ fromJSON(needs.setup.outputs.matrix-os) }}
      dotnet-version: ${{ needs.setup.outputs.dotnet-version }}
      benchmark-project: ${{ needs.setup.outputs.benchmark-project }}
      configuration: ${{ needs.setup.outputs.configuration }}
      defined-symbols: ${{ needs.setup.outputs.defined-symbols }}
      verbose: ${{ needs.setup.outputs.verbose }}
      max-regression-pct: ${{ fromJSON(needs.setup.outputs.max-regression-pct) }}
      force-new-baseline: ${{ fromJSON(needs.setup.outputs.force-new-baseline) }}
