name: Prerelease Auto Tag & Publish

permissions:
  contents: write
  packages: write

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      reason:
        description: 'Why run?'

env:
  DOTNET_NOLOGO: true
  MINVER_TAG_PREFIX: v

jobs:
  prerelease:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Skip if commit already tagged (any v* tag)
        id: tagcheck
        run: |
          if git tag --points-at HEAD | grep -E '^v[0-9]'; then
            echo "already_tagged=true" >> $GITHUB_OUTPUT
          else
            echo "already_tagged=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop (already tagged)
        if: steps.tagcheck.outputs.already_tagged == 'true'
        run: echo "Commit already has version tag â€“ nothing to do."

      - name: Compute prerelease tag
        if: steps.tagcheck.outputs.already_tagged == 'false'
        id: compute
        shell: bash
        run: |
          set -euo pipefail

          # Find latest stable (no hyphen) tag like v1.2.3
          if git describe --tags --match 'v[0-9]*.[0-9]*.[0-9]*' --abbrev=0 >/dev/null 2>&1; then
            LATEST_STABLE=$(git tag --list 'v[0-9].[0-9].[0-9]*' | grep -E '^v[0-9]+.[0-9]+.[0-9]+$' | sort -V | tail -n1 || true)
            BASE=${LATEST_STABLE#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE"
            NEXT_PATCH=$((PATCH + 1))
            echo "Latest stable tag: latest_stable_tag=${LATEST_STABLE}" >> $GITHUB_OUTPUT
            BASE=${LATEST_STABLE#v}
            MAJOR=${BASE%%.*}
            REST=${BASE#*.}
            MINOR=${REST%%.*}
            PATCH=${REST#*.}
            echo "Parsed version: major=${MAJOR}, minor=${MINOR}, patch=${PATCH}" >> $GITHUB_OUTPUT
            # increment patch for prerelease base
            NEXT_PATCH=$((PATCH + 1))
          else
            # No stable tag yet
            MAJOR=0
            MINOR=1
            NEXT_PATCH=0
          fi

          DATE=$(date -u +%Y%m%d)
          RUN=${GITHUB_RUN_NUMBER}
          PRERELEASE_TAG="v${MAJOR}.${MINOR}.${NEXT_PATCH}-preview.${DATE}.${RUN}"
          echo "prerelease_tag=${PRERELEASE_TAG}" >> $GITHUB_OUTPUT

      - name: Create & push prerelease tag
        if: steps.tagcheck.outputs.already_tagged == 'false'
        env:
          TAG: ${{ steps.compute.outputs.prerelease_tag }}
          GH_TOKEN: ${{ secrets.GH_PAT_VM2_ULID }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global url."https://${GH_TOKEN}@github.com/".insteadOf "https://github.com/"
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}
          git push origin HEAD:refs/heads/${GITHUB_REF_NAME}
          git tag -a "$TAG" -m "Automated prerelease $TAG"
          git push origin "$TAG"

      - name: Setup .NET
        if: steps.tagcheck.outputs.already_tagged == 'false'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Restore
        if: steps.tagcheck.outputs.already_tagged == 'false'
        run: dotnet restore

      - name: Build
        if: steps.tagcheck.outputs.already_tagged == 'false'
        run: dotnet build -c Release --no-restore

      - name: Pack (MinVer consumes the just-pushed prerelease tag)
        if: steps.tagcheck.outputs.already_tagged == 'false'
        run: |
          mkdir -p artifacts/pack
          dotnet pack -c Release --no-build -o artifacts/pack /p:MinVerTagPrefix=${MINVER_TAG_PREFIX}
          ls -1 artifacts/pack

      - name: Publish prerelease to NuGet
        if: steps.tagcheck.outputs.already_tagged == 'false'
        env:
            NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          if [ -z "${NUGET_API_KEY}" ]; then
            echo "NUGET_API_KEY not configured"; exit 1
          fi
          dotnet nuget push artifacts/pack/*.nupkg --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
          dotnet nuget push artifacts/pack/*.snupkg --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
