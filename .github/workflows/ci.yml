name: CI - Build, Test, Coverage & Benchmarks

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:
    inputs:
      os:
        description: 'JSON array of runners'
        default: '["ubuntu-latest"]'
        required: false
      dotnet-version:
        description: 'Version of .NET SDK to use'
        default: '9.0.x'
      test-project:
        description: 'Path to test project'
        default: './test/UlidType.Tests/UlidType.Tests.csproj'
      coverage-threshold:
        description: 'Minimum acceptable code coverage percentage'
        default: '75'
      run-benchmarks:
        description: 'Whether to run benchmarks and compare against baseline'
        type: boolean
        default: true
      benchmark-project:
        description: 'Path to benchmark project'
        default: './benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj'
      perf-regression-threshold:
        description: 'Maximum acceptable performance regression percentage'
        default: '10'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_VERSION:            ${{ inputs.dotnet-version            || vars.DOTNET_VERSION            || '9.0.x' }}
  TEST_PROJECT:              ${{ inputs.test-project              || vars.TEST_PROJECT              || './test/UlidType.Tests/UlidType.Tests.csproj' }}
  COVERAGE_THRESHOLD:        ${{ inputs.coverage-threshold        || vars.COVERAGE_THRESHOLD        || '75' }} # percent
  RUN_BENCHMARKS:            ${{ inputs.run-benchmarks            || vars.RUN_BENCHMARKS            || 'true' }} # "true" to run benchmarks and compare against baseline
  BENCHMARK_PROJECT:         ${{ inputs.benchmark-project         || vars.BENCHMARK_PROJECT         || './benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj' }}
  REGRESSION_THRESHOLD:      ${{ inputs.perf-regression-threshold || vars.REGRESSION_THRESHOLD      || '10' }} # percent allowed regression

jobs:
  matrix-ci:
    name: Build on ${{ matrix.os }} tests & benchmarks on Linux only
    runs-on: ${{ matrix.os }}
    if: ${{ github.event_name != 'push' || !(contains(github.event.head_commit.message, '[skip ci]') || contains(github.event.head_commit.message, '[no ci]')) }}
    strategy:
      matrix:
        os: ${{ fromJSON(inputs.os || vars.MATRIX_OS || '["ubuntu-latest"]') }} # , "windows-latest", "macos-latest"]
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: |
            **/packages.lock.json
            **/*.csproj

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build -c Release --no-restore

      # -- Unit tests + coverage ---------------------------------
      - name: Run unit tests with coverage
        shell: bash
        run: |
          set -euo pipefail
          dotnet test ${TEST_PROJECT} -c Release --no-build \
            /p:ExcludeByAttribute="GeneratedCodeAttribute" \
            -- \
            --coverage \
            --coverage-output-format xml \
            --coverage-output coverage/coverage.cobertura.xml

          # locate cobertura file produced by collector
          COV_FILE=$(find "$(pwd)" -type f -path "*/TestResults/*/coverage.cobertura.xml" -print -quit || true)
          if [ -z "$COV_FILE" ]; then
            echo "Coverage file not found."
            exit 2
          fi

          mkdir -p coverage
          cp "$COV_FILE" coverage/coverage.cobertura.xml

          # install ReportGenerator and create a text summary
          dotnet tool install --tool-path ./tools dotnet-reportgenerator-globaltool --version 5.*
          ./tools/reportgenerator -reports:coverage/coverage.cobertura.xml -targetdir:coverage_report -reporttypes:TextSummary

          SUMMARY="coverage_report/Summary.txt"
          if [ ! -f "$SUMMARY" ]; then
            echo "Coverage summary not found; failing."
            exit 2
          fi

          PCT=$(sed -nE 's/Method coverage: ([0-9]+(.?[0-9]+)?)%.*/\1/p' "$SUMMARY" | head -n1)
          if [ -z "$PCT" ]; then
            echo "Could not parse coverage percent from $SUMMARY"
            exit 2
          fi

          echo "Coverage: $PCT% (threshold: ${COVERAGE_THRESHOLD}%)"
          awk -v p="$PCT" -v t="${COVERAGE_THRESHOLD}" 'BEGIN { if (p+0 < t+0) { print "Coverage below threshold"; exit 1 } else { print "Coverage OK" } }'

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
            name: coverage-${{ matrix.os }}
            path: |
              coverage/coverage.cobertura.xml
              coverage_report/

      # -- Benchmark run: Linux only -----------------------------------------
      - name: Run benchmarks
        if: ${{ fromJSON(env.RUN_BENCHMARKS) && matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          set -euo pipefail

          # run benchmark project (BenchmarkDotNet produces JSON under BenchmarkDotNet.Artifacts)
          mkdir -p ./benchmarks/BenchmarkDotNet.Artifacts
          dotnet run -c Release --project ${BENCHMARK_PROJECT} \
            --filter '*' \
            --memory \
            --exporters JSON \
            --artifacts "./benchmarks/BenchmarkDotNet.Artifacts" || true

          mkdir -p ./benchmarks/results
          cp -r ./benchmarks/BenchmarkDotNet.Artifacts/results/*.json benchmarks/results || true

      - name: Upload benchmark result artifact
        if: ${{ fromJSON(env.RUN_BENCHMARKS) && matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: current-benchmark-result
          path: benchmarks/results

      - name: Compare benchmarks against baseline
        if: ${{ fromJSON(env.RUN_BENCHMARKS) && matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # If multiple JSON results exist, merge sums heuristically
          CURRENT_DIR=benchmarks/results
          BASELINE=benchmarks/baseline.json

          CUR_FILES=$(ls -1 "$CURRENT_DIR"/*.json 2>/dev/null || true)
          if [ -z "$CUR_FILES" ]; then
            echo "No current benchmark result JSON files found; skipping comparison."
            exit 0
          fi

          # Merge current totals
          SUM_CUR=0
          for f in $CUR_FILES; do
            VAL=$(jq '[.Benchmarks[]? | ( .PrimaryMetrics[0].Mean // (.Statistics.Mean // 0) )] | add // 0' "$f")
            SUM_CUR=$(awk -v a="$SUM_CUR" -v b="$VAL" 'BEGIN { printf "%.10f", a + b }')
          done

          if [ ! -f "$BASELINE" ]; then
            echo "Baseline not found at $BASELINE. To enable regression checks, commit one of the current JSON files as baseline.json."
            exit 0
          fi

          SUM_BASE=$(jq '[.Benchmarks[]? | ( .PrimaryMetrics[0].Mean // (.Statistics.Mean // 0) )] | add // 0' "$BASELINE")

          if [ -z "$SUM_BASE" ] || [ "$SUM_BASE" = "0" ]; then
            echo "Baseline sum invalid ($SUM_BASE); skipping regression check."
            exit 0
          fi

          echo "Baseline total mean: $SUM_BASE"
          echo "Current aggregated total mean (all JSON files): $SUM_CUR"

          PCT_CHANGE=$(awk -v b="$SUM_BASE" -v c="$SUM_CUR" 'BEGIN { if (b==0){print 0}else{ printf "%.4f", ((c - b) / b) * 100 } }')
          echo "Percent change vs baseline: ${PCT_CHANGE}% (allowed: ${REGRESSION_THRESHOLD}%)"

          awk -v pc="$PCT_CHANGE" -v th="${REGRESSION_THRESHOLD}" 'BEGIN { if (pc > th) { print "Performance regression exceeds threshold"; exit 1 } else { print "Performance OK" } }'

      # -- macOS & Windows: just confirm build succeeded ---------------------
      - name: Non-test platform notice (push only)
        if: github.event_name == 'push'
        shell: bash
        run: "echo \"Push event: tests & benchmarks (Linux only). This platform performed build validation.\""