name: CI - Build, Test, Coverage & Benchmarks

on:
  push:
    branches:
      - '**'

env:
  COVERAGE_THRESHOLD: '75'   # percent
  PERF_THRESHOLD: '10'       # percent allowed regression

jobs:
  matrix-ci:
    name: Build on ${{ matrix.os }} — tests & benchmarks on Linux
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build -c Release --no-restore

      # -- Unit tests + coverage: Linux only ---------------------------------
      - name: Run unit tests with coverage (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          set -euo pipefail

          # run tests and collect coverage (XPlat collector)
          __dotnet test__ ./test/UlidType.Tests/UlidType.Tests.csproj -c Release --no-build --collect:"XPlat Code Coverage"

          # locate cobertura file produced by collector
          COV_FILE=$(find "$(pwd)" -type f -path "*/TestResults/*/coverage.cobertura.xml" -print -quit || true)
          if [ -z "$COV_FILE" ]; then
            echo "Coverage file not found."
            exit 2
          fi
          mkdir -p coverage
          cp "$COV_FILE" coverage/coverage.cobertura.xml

          # install ReportGenerator and create a text summary
          dotnet tool install --tool-path ./tools dotnet-reportgenerator-globaltool --version 5.*
          ./tools/reportgenerator -reports:coverage/coverage.cobertura.xml -targetdir:coverage_report -reporttypes:TextSummary

          SUMMARY="coverage_report/Summary.txt"
          if [ ! -f "$SUMMARY" ]; then
            echo "Coverage summary not found; failing."
            exit 2
          fi

          PCT=$(grep -oP '\d+(\.\d+)?(?=%)' "$SUMMARY" | head -n1 || true)
          if [ -z "$PCT" ]; then
            echo "Could not parse coverage percent from $SUMMARY"
            exit 2
          fi

          echo "Coverage: $PCT% (threshold: ${COVERAGE_THRESHOLD}%)"
          awk -v p="$PCT" -v t="${COVERAGE_THRESHOLD}" 'BEGIN { if (p+0 < t+0) { print "Coverage below threshold"; exit 1 } else { print "Coverage OK" } }'
        shell: bash

      # -- Benchmark run: Linux only -----------------------------------------
      - name: Run benchmarks (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          set -euo pipefail

          # run benchmark project (BenchmarkDotNet produces JSON under BenchmarkDotNet.Artifacts)
          __dotnet run__ -c Release -p benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj --no-build || true

          # locate the latest results JSON
          RESULT_JSON=$(find . -type f -name "*.json" -path "*/BenchmarkDotNet.Artifacts/*/results/*.json" -print0 | xargs -0 ls -t 2>/dev/null | head -n1 || true)
          if [ -z "$RESULT_JSON" ]; then
            RESULT_JSON=$(find . -type f -name "*.json" -path "*/BenchmarkDotNet.Artifacts/*" -print0 | xargs -0 ls -t 2>/dev/null | head -n1 || true)
          fi
          if [ -z "$RESULT_JSON" ]; then
            echo "Benchmark JSON result not found; failing."
            exit 2
          fi
          mkdir -p benchmarks/results
          cp "$RESULT_JSON" benchmarks/results/current-bench-result.json

      - name: Upload benchmark result artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: current-benchmark-result
          path: benchmarks/results/current-bench-result.json

      - name: Compare benchmarks against baseline (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          set -euo pipefail
          CURRENT=benchmarks/results/current-bench-result.json
          BASELINE=benchmarks/baseline.json

          if [ ! -f "$CURRENT" ]; then
            echo "Current benchmark result not found; skipping comparison."
            exit 0
          fi

          if [ ! -f "$BASELINE" ]; then
            echo "Baseline not found at $BASELINE. Skipping regression check on first run."
            echo "To enable regression checks: commit $CURRENT as $BASELINE in the repository."
            exit 0
          fi

          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          SUM_BASE=$(jq '[.Benchmarks[]? | ( .PrimaryMetrics[0].Mean // (.Statistics.Mean // 0) )] | add' "$BASELINE")
          SUM_CUR=$(jq '[.Benchmarks[]? | ( .PrimaryMetrics[0].Mean // (.Statistics.Mean // 0) )] | add' "$CURRENT")

          if [ -z "$SUM_BASE" ] || [ "$SUM_BASE" = "null" ] || [ "$SUM_BASE" = "0" ]; then
            echo "Baseline sums invalid ($SUM_BASE). Skipping regression check."
            exit 0
          fi

          echo "Baseline total mean: $SUM_BASE"
          echo "Current total mean: $SUM_CUR"

          PCT_CHANGE=$(awk -v b="$SUM_BASE" -v c="$SUM_CUR" 'BEGIN { printf "%.4f", ((c - b) / b) * 100 }')
          echo "Percent change vs baseline: ${PCT_CHANGE}% (allowed: ${PERF_THRESHOLD}%)"
          awk -v pc="$PCT_CHANGE" -v th="${PERF_THRESHOLD}" 'BEGIN { if (pc > th) { print "Performance regression exceeds threshold"; exit 1 } else { print "Performance OK" } }'
        shell: bash

      # -- macOS & Windows: just confirm build succeeded ---------------------
      - name: Smoke test message (Windows/macOS)
        if: matrix.os != 'ubuntu-latest'
        run: |
          echo "Build succeeded on $RUNNER_OS. Unit tests and benchmarks are executed on Linux only."
        shell: bash