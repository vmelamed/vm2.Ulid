name: CI - Build, Test, Coverage & Benchmarks

on:
  push:
    branches:
      - "**"

env:
  COVERAGE_THRESHOLD: "75" # percent
  PERF_THRESHOLD: "10" # percent allowed regression

jobs:
  matrix-ci:
    name: Build on ${{ matrix.os }} ï¿½ tests & benchmarks on Linux
    runs-on: ${{ matrix.os }}
    if: "!(contains(github.event.head_commit.message, '[skip ci]') || contains(github.event.head_commit.message, '[no ci]')"
    strategy:
      matrix:
        os: [ubuntu-latest] # , windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "9.0.x"

      - name: Restore
        if: matrix.os == 'ubuntu-latest'
        run: dotnet restore

      - name: Build (Release)
        if: matrix.os == 'ubuntu-latest'
        run: dotnet build -c Release --no-restore

      # -- Unit tests + coverage: Linux only ---------------------------------
      - name: Run unit tests with coverage (Linux)
        if: matrix.os == 'ubuntu-latest' || github.event_name == 'pull_request'
        shell: bash
        run: |
          set -euo pipefail
          dotnet test ./test/UlidType.Tests/UlidType.Tests.csproj -c Release --no-build \
            /p:ExcludeByAttribute="GeneratedCodeAttribute" \
            -- \
            --coverage \
            --coverage-output-format xml \
            --coverage-output coverage/coverage.cobertura.xml

          # locate cobertura file produced by collector
          COV_FILE=$(find "$(pwd)" -type f -path "*/TestResults/*/coverage.cobertura.xml" -print -quit || true)
          if [ -z "$COV_FILE" ]; then
            echo "Coverage file not found."
            exit 2
          fi

          mkdir -p coverage
          cp "$COV_FILE" coverage/coverage.cobertura.xml

          # install ReportGenerator and create a text summary
          dotnet tool install --tool-path ./tools dotnet-reportgenerator-globaltool --version 5.*
          ./tools/reportgenerator -reports:coverage/coverage.cobertura.xml -targetdir:coverage_report -reporttypes:TextSummary

          SUMMARY="coverage_report/Summary.txt"
          if [ ! -f "$SUMMARY" ]; then
            echo "Coverage summary not found; failing."
            exit 2
          fi

          PCT=$(grep -oP '\d+(\.\d+)?(?=%)' "$SUMMARY" | head -n1 || true)
          if [ -z "$PCT" ]; then
            echo "Could not parse coverage percent from $SUMMARY"
            exit 2
          fi

          echo "Coverage: $PCT% (threshold: ${COVERAGE_THRESHOLD}%)"
          awk -v p="$PCT" -v t="${COVERAGE_THRESHOLD}" 'BEGIN { if (p+0 < t+0) { print "Coverage below threshold"; exit 1 } else { print "Coverage OK" } }'

      - name: Upload coverage artifact
        if: (github.event_name == 'pull_request' || matrix.os == 'ubuntu-latest') && always()
        uses: actions/upload-artifact@v4
        with:
            name: coverage-${{ matrix.os }}
            path: |
              coverage/coverage.cobertura.xml
              coverage_report/

      # -- Benchmark run: Linux only -----------------------------------------
      - name: Run benchmarks (Linux)
        if: matrix.os == 'ubuntu-latest' || github.event_name == 'pull_request'
        shell: bash
        run: |
          set -euo pipefail

          # run benchmark project (BenchmarkDotNet produces JSON under BenchmarkDotNet.Artifacts)
          mkdir BenchmarkDotNet.Artifacts
          dotnet run -c Release --project ./benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj \
            --filter '*' \
            --memory \
            --exporters JSON \
            --artifacts ./benchmarks/BenchmarkDotNet.Artifacts || true

          mkdir -p benchmarks/results
          cp -r ./benchmarks/BenchmarkDotNet.Artifacts/results/*.json benchmarks/results

      - name: Upload benchmark result artifact (Linux)
        if: matrix.os == 'ubuntu-latest' || github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: current-benchmark-result
          path: benchmarks/results

      - name: Compare benchmarks against baseline (Linux)
        if: matrix.os == 'ubuntu-latest' || github.event_name == 'pull_request'
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # If multiple JSON results exist, merge sums heuristically
          CURRENT_DIR=benchmarks/results
          BASELINE=benchmarks/baseline.json

          CUR_FILES=$(ls -1 "$CURRENT_DIR"/*.json 2>/dev/null || true)
          if [ -z "$CUR_FILES" ]; then
            echo "No current benchmark result JSON files found; skipping comparison."
            exit 0
          fi

            # Merge current totals
          SUM_CUR=0
          for f in $CUR_FILES; do
            VAL=$(jq '[.Benchmarks[]? | ( .PrimaryMetrics[0].Mean // (.Statistics.Mean // 0) )] | add // 0' "$f")
            SUM_CUR=$(awk -v a="$SUM_CUR" -v b="$VAL" 'BEGIN { printf "%.10f", a + b }')
          done

          if [ ! -f "$BASELINE" ]; then
            echo "Baseline not found at $BASELINE. To enable regression checks, commit one of the current JSON files as baseline.json."
            exit 0
          fi

          SUM_BASE=$(jq '[.Benchmarks[]? | ( .PrimaryMetrics[0].Mean // (.Statistics.Mean // 0) )] | add // 0' "$BASELINE")

          if [ -z "$SUM_BASE" ] || [ "$SUM_BASE" = "0" ]; then
            echo "Baseline sum invalid ($SUM_BASE); skipping regression check."
            exit 0
          fi

          echo "Baseline total mean: $SUM_BASE"
          echo "Current aggregated total mean (all JSON files): $SUM_CUR"

          PCT_CHANGE=$(awk -v b="$SUM_BASE" -v c="$SUM_CUR" 'BEGIN { if (b==0){print 0}else{ printf "%.4f", ((c - b) / b) * 100 } }')
          echo "Percent change vs baseline: ${PCT_CHANGE}% (allowed: ${PERF_THRESHOLD}%)"

          awk -v pc="$PCT_CHANGE" -v th="${PERF_THRESHOLD}" 'BEGIN { if (pc > th) { print "Performance regression exceeds threshold"; exit 1 } else { print "Performance OK" } }'

      # -- macOS & Windows: just confirm build succeeded ---------------------
      - name: Non-test platform notice (push only)
        if: github.event_name == 'push' && matrix.os != 'ubuntu-latest'
        shell: bash
        run: "echo \"Push event: tests & benchmarks run only on Linux. This platform performed build validation.\""