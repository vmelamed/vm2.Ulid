name: Reusable - Test .NET

on:
  workflow_call:
    inputs:
      dotnet_version:
        type: string
        required: true
      test_project:
        description: 'Path to test project'
        type: string
        required: false
      coverage_threshold:
        type: string
        required: true
      os:
        type: string
        required: false
        default: '["ubuntu-latest"]'
      configuration:
        description: 'The type of build to produce, e.g. Release vs Debug'
        type: string
        required: false
        default: 'Release'

permissions:
  contents: read

env:
  TC_COBERTURA_DIR:  'coverage'
  TC_COBERTURA_FILE: 'coverage/coverage.cobertura.xml'
  TC_SUMMARY_DIR:    'coverage_report'
  TC_SUMMARY_FILE:   'coverage_report/Summary.txt'

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{ fromJSON(inputs.os) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet_version: ${{ inputs.dotnet_version }}
          cache: true
          cache-dependency-path: |
            **/packages.lock.json
            **/*.csproj

      - name: Run unit tests with coverage
        shell: bash
        env:
          COVERAGE_THRESHOLD: ${{ inputs.coverage_threshold }}
          TEST_PROJECT: ${{ inputs.test_project }}
          CONFIGURATION: ${{ inputs.configuration }}
        run: |
          set -euo pipefail

          dotnet test \
            ${{ inputs.test_project }} \
            --configuration ${{ inputs.configuration }} \
            /p:ExcludeByAttribute="GeneratedCodeAttribute" -- \
            --coverage \
            --coverage-output-format xml \
            --coverage-output "${TC_COBERTURA_FILE}"

          f=$(find "$(pwd)" -type f -path "*/${TC_COBERTURA_FILE}" -print -quit || true)
          if [ -z "${f}" ]; then
            echo "Coverage file not found."
            exit 2
          fi

          mkdir -p "${TC_COBERTURA_DIR}"
          cp "${f}" "${TC_COBERTURA_FILE}"

          dotnet tool install --tool-path ./tools dotnet-reportgenerator-globaltool --version 5.*
          ./tools/reportgenerator \
            -reports:${TC_COBERTURA_FILE} \
            -targetdir:"${TC_SUMMARY_DIR}" \
            -reporttypes:TextSummary

          if [ ! -s "${TC_SUMMARY_FILE}" ]; then
            echo "Coverage summary not found."
            exit 2
          fi

          pct=$(sed -nE 's/Method coverage: ([0-9]+)(\.[0-9]+)?%.*/\1/p' "${TC_SUMMARY_FILE}" | head -n1)
          if [ -z "${pct}" ]; then
            echo "Could not parse coverage percent from ${TC_SUMMARY_FILE}"
            exit 2
          fi

          echo "Coverage: ${pct}% (threshold: ${COVERAGE_THRESHOLD}%)"
          if (( pct < COVERAGE_THRESHOLD )); then
            echo "Coverage ${pct}% is below threshold ${COVERAGE_THRESHOLD}%"
            exit 2
          else
            echo "Coverage ${pct}% meets threshold ${COVERAGE_THRESHOLD}%"
          fi

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: ${{ env.TC_SUMMARY_DIR }}
