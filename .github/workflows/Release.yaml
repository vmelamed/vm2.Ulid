name: Release (Stable)

on:
  push:
    branches:
      - main
    tags: ["v*", "!v*-*"]

  workflow_dispatch:
    inputs:
      reason:
        description: "Why run?"

      os:
        description: "JSON array of runners"
        type: string
        default: '["ubuntu-latest"]'
        required: true

      dotnet-version:
        description: "Version of .NET SDK to use"
        type: string
        default: "9.0.x"
        required: true

      test-project:
        description: "Path to test project"
        type: string
        default: "./test/UlidType.Tests/UlidType.Tests.csproj"
        required: true

      benchmark-project:
        description: "Path to benchmark project"
        type: string
        default: "./benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj"
        required: true

      force-publish:
        description: "Force publish even if already tagged"
        type: boolean
        default: false

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  FORCE_PUBLISH: ${{ inputs.force-publish || 'false' }}
  REASON: ${{ inputs.reason || (inputs.force-publish && 'forced publish') || 'manual run' }}

jobs:
  # last time run the gates before release
  build:
    name: Build
    uses: ./.github/workflows/build.yaml
    with:
      os: ${{ inputs.os || vars.MATRIX_OS || '["ubuntu-latest"]' }}
      dotnet-version: ${{ inputs.dotnet-version || vars.DOTNET_VERSION || '9.0.x' }}
      configuration: Release

  test:
    name: Test
    needs: build
    uses: ./.github/workflows/test.yaml
    with:
      os: ${{ inputs.os || vars.MATRIX_OS || '["ubuntu-latest"]' }}
      dotnet-version: ${{ inputs.dotnet-version || vars.DOTNET_VERSION || '9.0.x' }}
      test-project: ${{ inputs.test-project || vars.TEST_PROJECT || './test/UlidType.Tests/UlidType.Tests.csproj' }}
      configuration: Release
      verbose: ${{ fromJSON(vars.VERBOSE) || false }}
      min-coverage-pct: ${{ fromJSON(vars.MIN_COVERAGE_PCT) || 75 }}

  benchmarks:
    name: Benchmarks (Linux only)
    needs: build
    uses: ./.github/workflows/benchmarks.yaml
    with:
      os: ${{ inputs.os || vars.MATRIX_OS || '["ubuntu-latest"]' }}
      dotnet-version: ${{ inputs.dotnet-version || vars.DOTNET_VERSION || '9.0.x' }}
      benchmark-project: ${{ inputs.benchmark-project || vars.BENCHMARK_PROJECT || './benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj' }}
      configuration: Release
      verbose: ${{ fromJSON(vars.VERBOSE) || false }}
      max-regression-pct: ${{ fromJSON(vars.MAX_REGRESSION_PCT) || 10 }}

  release:
    name: Release Stable
    needs: [build, test, benchmarks]
    if: ${{ github.event_name == 'workflow_dispatch' || (startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name,'-')) }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version || vars.DOTNET_VERSION || '9.0.x' }}
          cache: true
          cache-dependency-path: |
            **/packages.lock.json
            **/*.csproj

      - name: Pack (stable)
        env:
          REASON: ${{ inputs.reason }}
        run: |
          mkdir -p artifacts/pack
          dotnet pack -c Release -o artifacts/pack \
            "/p:PackageReleaseNotes=Stable: ${REASON:-tag push}"
          ls -1 artifacts/pack

      - name: Publish stable to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          if [ -z "${NUGET_API_KEY}" ]; then
            echo "NUGET_API_KEY not configured"; exit 1
          fi

          dotnet nuget push artifacts/pack/*.nupkg \
            --api-key  "${NUGET_API_KEY}" \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate

      - name: Summary
        env:
          REASON: ${{ inputs.reason }}
        run: |
          {
              echo "## Release Summary"
              echo
              echo "- Tag: ${GITHUB_REF_NAME}"
              echo "- Stable release reason: ${REASON:-tag push}"
              echo "- Artifacts:"
              ls -1 artifacts/pack | sed 's/^/  - /'
          } >> "$GITHUB_STEP_SUMMARY"
