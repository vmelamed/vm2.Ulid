name: CI - Build, Test, Coverage & Benchmarks

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:
    inputs:
      os:
        description: "JSON array of runners"
        type: string
        default: '["ubuntu-latest"]'
        required: true

      dotnet-version:
        description: "Version of .NET SDK to use"
        type: string
        default: "9.0.x"
        required: true

      build-configuration:
        description: "The type of builds to produce, e.g. Release vs Debug"
        type: string
        required: false
        default: "Release"

      define:
        description: "Define constants to pass to the compiler"
        type: string
        default: ""
        required: false

      verbose:
        description: "Whether to enable verbose logging"
        type: boolean
        default: false
        required: false

      test-project:
        description: "Path to test project"
        type: string
        default: "./test/UlidType.Tests/UlidType.Tests.csproj"
        required: true

      min_coverage_pct:
        description: "Minimum acceptable code coverage percentage"
        type: number
        default: 75
        required: true

      run-benchmarks:
        description: "Whether to run benchmarks and compare against baseline"
        type: boolean
        default: true
        required: true

      benchmark-project:
        description: "Path to benchmark project"
        type: string
        default: "./benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj"
        required: true

      max-regression-pct:
        description: "Maximum acceptable performance regression percentage"
        type: number
        default: 10 # percent
        required: true

      force-new-baseline:
        description: "Whether to force new baseline (if true, no regression check is done)"
        type: boolean
        default: false
        required: true

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    uses: ./.github/workflows/build.yml
    if: >
      ${{ github.event_name != 'push' ||
          (!contains(github.event.head_commit.message, '[skip ci]')) &&
          (!contains(github.event.head_commit.message, '[no ci]'  ))    }}
    with:
      dotnet-version: ${{ inputs.dotnet-version || vars.DOTNET_VERSION || '9.0.x' }}
      os: ${{ inputs.os || vars.MATRIX_OS || '["ubuntu-latest"]' }}
      configuration: ${{ inputs.build-configuration ||vars.BUILD_CONFIGURATION || 'Release' }}

  test:
    name: Test
    needs: build
    uses: ./.github/workflows/test.yml
    with:
      dotnet-version: ${{ inputs.dotnet-version || vars.DOTNET_VERSION || '9.0.x' }}
      os: ${{ inputs.os || vars.MATRIX_OS || '["ubuntu-latest"]' }}
      test-project: ${{ inputs.test-project || vars.TEST_PROJECT || './test/UlidType.Tests/UlidType.Tests.csproj' }}
      configuration: ${{ inputs.build-configuration ||vars.BUILD_CONFIGURATION || 'Release' }}
      define: ${{ inputs.define || vars.DEFINE || '' }}
      verbose: ${{ inputs.verbose || vars.VERBOSE || false }}
      min_coverage_pct: ${{ inputs.min_coverage_pct || fromJSON(vars.MIN_COVERAGE_PCT) || 75 }}

  benchmarks:
    name: Benchmarks (Linux only)
    needs: build
    if: ${{ inputs.run-benchmarks || fromJSON(vars.RUN_BENCHMARKS) || true }}
    uses: ./.github/workflows/benchmarks.yml
    with:
      dotnet-version: ${{ inputs.dotnet-version || vars.DOTNET_VERSION || '9.0.x' }}
      os: ${{ inputs.os || vars.MATRIX_OS || '["ubuntu-latest"]' }}
      benchmark-project: ${{ inputs.benchmark-project || vars.BENCHMARK_PROJECT || './benchmarks/UlidType.Benchmarks/UlidType.Benchmarks.csproj' }}
      configuration: ${{ inputs.build-configuration ||vars.BUILD_CONFIGURATION || 'Release' }}
      define: ${{ inputs.define || vars.DEFINE || '' }}
      verbose: ${{ inputs.verbose || vars.VERBOSE || false }}
      max-regression-pct: ${{ inputs.max-regression-pct || fromJSON(vars.MAX_REGRESSION_PCT) || 10 }}
      force-new-baseline: ${{ inputs.force-new-baseline || fromJSON(vars.FORCE_NEW_BASELINE) || false }}
